@* @page
@model PRN222_Final_Project.Pages.User.CartModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@using System.Text.Json
@{
    ViewData["Title"] = "Giỏ Hàng Của Bạn";
    string userIdStr = HttpContextAccessor.HttpContext?.Session.GetString("UserID");
    if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out int userId))
    {
        userIdStr = userId.ToString("D4");
    }
    else
    {
        userIdStr = "0000";
    }
}

<head>
    <link rel="stylesheet" href="~/css/Cart.css" asp-append-version="true" />
    <style>
        .timer-container {
            text-align: center;
            margin: 10px 0;
        }

        .timer {
            font-size: 1.5rem;
            font-weight: bold;
            color: #ff5722;
        }

        .success {
            color: #28a745;
            font-weight: bold;
        }

        .failure {
            color: #dc3545;
            font-weight: bold;
        }

        .modal-body img {
            margin: 20px auto;
            display: block;
            max-width: 200px;
        }
    </style>
</head>

<div class="container cart-container">
    <h2 class="text-center mb-4">Giỏ Hàng Của Bạn</h2>

    @if (Model.ListCart != null && Model.ListCart.Any())
    {
        <div class="cart-items">
            @foreach (var item in Model.ListCart)
            {
                <div class="cart-item">
                    <img src="@item.Image" alt="@item.ProductName">
                    <div class="cart-item-info">
                        <h5 class="cart-item-title">@item.ProductName</h5>
                        <p class="cart-item-price">@item.Price.ToString("N0") đ</p>
                    </div>
                    <div class="quantity-control">
                        <form method="post">
                            <input type="hidden" name="productId" value="@item.ProductId" />
                            <button formaction="/User/Cart?handler=UpdateQuantity&change=-1" class="btn btn-sm btn-outline-secondary">-</button>
                            <input type="text" class="quantity" value="@item.Quantity" readonly />
                            <button formaction="/User/Cart?handler=UpdateQuantity&change=1" class="btn btn-sm btn-outline-secondary">+</button>
                        </form>
                    </div>
                    <div class="remove-item ms-3">
                        <form method="post">
                            <input type="hidden" name="productId" value="@item.ProductId" />
                            <button formaction="/User/Cart?handler=RemoveItem" class="btn btn-danger btn-sm">Xóa</button>
                        </form>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-center">Giỏ hàng trống! <a href="/Products">Mua hàng ngay</a>.</p>
    }

    <!-- Pagination -->
    <nav aria-label="Cart Pagination">
        <ul class="pagination justify-content-center">
            @if (Model.TotalPages > 1)
            {
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?pageNumber=@(Model.CurrentPage - 1)">Trước</a>
                </li>

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="?pageNumber=@i">@i</a>
                    </li>
                }

                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" href="?pageNumber=@(Model.CurrentPage + 1)">Tiếp</a>
                </li>
            }
        </ul>
    </nav>
</div>

<!-- Cart Summary and Payment Form -->
<form method="post" asp-page-handler="Payment" id="paymentForm">
    <div class="container cart-summary">
        <h3 class="mb-3">Tổng Quan Đơn Hàng</h3>

        @if (Model.ListCart != null && Model.ListCart.Count > 0)
        {
            <div class="d-flex justify-content-between mb-2">
                <span>Tạm tính (@Model.ListCart.Count sản phẩm):</span>
                <span class="fw-bold">
                    @((Model.ListCart.Sum(x => x.Quantity * x.Price) ?? 0).ToString("N0") + " đ")
                </span>
            </div>

            <div class="d-flex justify-content-between mb-2">
                <span>Phí vận chuyển:</span>
                <span class="fw-bold">Free</span>
            </div>

            <div class="d-flex justify-content-between mb-3">
                <span>Tổng cộng:</span>
                <span class="fw-bold text-success fs-4" id="totalAmount">
                    @((Model.ListCart.Sum(x => x.Quantity * x.Price)).Value.ToString("N0") + " đ")
                </span>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-between mb-2">
                <span>Tạm tính (0 sản phẩm):</span>
                <span class="fw-bold">0 đ</span>
            </div>

            <div class="d-flex justify-content-between mb-2">
                <span>Phí vận chuyển:</span>
                <span class="fw-bold">0 đ</span>
            </div>

            <div class="d-flex justify-content-between mb-3">
                <span>Tổng cộng:</span>
                <span class="fw-bold text-success fs-4">0 đ</span>
            </div>
        }

        <div class="mb-3">
            <label for="address" class="form-label fw-bold">Địa chỉ - Số điện thoại giao hàng:</label>
            <input type="text" class="address-input form-control" id="address" name="address"
                   placeholder="Nhập địa chỉ và số điện thoại giao hàng..." required>
            <small id="addressError" class="text-danger" style="display: none;">Vui lòng nhập cả địa chỉ và số điện thoại!</small>
        </div>

        <button type="button" class="btn-checkout" id="showPaymentModal">Thanh Toán</button>
    </div>

    <!-- Payment Modal -->
    <div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="paymentModalLabel">Thanh Toán Đơn Hàng</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img src="" alt="QR Code Thanh Toán" id="qr-code">
                    <p><strong>Số tiền:</strong> <span id="modal-price"></span></p>
                    <p><strong>Địa chỉ giao hàng:</strong> <span id="modal-address"></span></p>
                    <p><strong>Nội dung chuyển khoản:</strong> <span id="payment-code"></span></p>
                    <p><strong>Ngân hàng:</strong> TPBank</p>
                    <p><strong>Số tài khoản:</strong> 00003480126</p>
                    <p><strong>Chủ tài khoản:</strong> Trần Đình Đức</p>
                    <div class="timer-container">
                        <p>Thời gian còn lại: <span id="timer" class="timer">03:00</span></p>
                        <p id="payment-status"></p>
                    </div>
                    <p>Vui lòng quét mã QR hoặc chuyển khoản theo thông tin trên để hoàn tất thanh toán.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
</form>

<!-- Bootstrap JS and Custom Script -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const paymentModal = document.getElementById('paymentModal');
        const qrBaseUrl = 'https://qr.sepay.vn/img?acc=00003480126&bank=TPBank&amount=';
        const userIdStr = '@userIdStr';
        let currentPaymentCode = '';
        let timerInterval = null;
        let checkInterval = null;
        const totalTime = 3 * 60 * 1000; // 3 phút
        let remainingTime = totalTime;

        // Xử lý nút Thanh Toán
        document.getElementById('showPaymentModal').addEventListener('click', function (e) {
            e.preventDefault();

            const addressInput = document.getElementById('address');
            const addressError = document.getElementById('addressError');

            if (!addressInput.value.trim()) {
                addressError.style.display = 'block';
                return;
            }
            addressError.style.display = 'none';

            const modal = new bootstrap.Modal(paymentModal);
            modal.show();
        });

        // Khi modal hiển thị
        paymentModal.addEventListener('show.bs.modal', function (event) {
            const address = document.getElementById('address').value;
            const price = document.getElementById('totalAmount').textContent.trim();

            const now = new Date();
            const timestamp = now.getUTCFullYear().toString().slice(-2) +
                String(now.getUTCMonth() + 1).padStart(2, '0') +
                String(now.getUTCDate()).padStart(2, '0') +
                String(now.getUTCHours()).padStart(2, '0') +
                String(now.getUTCMinutes()).padStart(2, '0');
            currentPaymentCode = `${userIdStr}${timestamp}`;

            const modalPrice = document.getElementById('modal-price');
            const modalAddress = document.getElementById('modal-address');
            const paymentCodeSpan = document.getElementById('payment-code');
            const qrImage = document.getElementById('qr-code');
            const timerDisplay = document.getElementById('timer');
            const paymentStatus = document.getElementById('payment-status');

            modalPrice.textContent = price;
            modalAddress.textContent = address;
            paymentCodeSpan.textContent = currentPaymentCode;
            paymentStatus.textContent = '';

            const cleanPrice = price.replace(/[^0-9]/g, ''); // Loại bỏ ký tự không phải số
            qrImage.src = `${qrBaseUrl}${cleanPrice}&des=${currentPaymentCode}`;

            remainingTime = totalTime;
            updateTimerDisplay(timerDisplay);
            startTimer(timerDisplay, paymentStatus);
            startPaymentCheck(address, currentPaymentCode, paymentStatus);
        });

        // Khi modal bị đóng
        paymentModal.addEventListener('hidden.bs.modal', function () {
            clearInterval(timerInterval);
            clearInterval(checkInterval);
        });

        // Cập nhật đồng hồ đếm ngược
        function updateTimerDisplay(timerElement) {
            const minutes = Math.floor(remainingTime / 60000);
            const seconds = Math.floor((remainingTime % 60000) / 1000);
            timerElement.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }

        // Khởi động đồng hồ đếm ngược
        function startTimer(timerElement, statusElement) {
            timerInterval = setInterval(() => {
                remainingTime -= 1000;
                updateTimerDisplay(timerElement);

                if (remainingTime <= 0) {
                    clearInterval(timerInterval);
                    clearInterval(checkInterval);
                    statusElement.textContent = 'Thanh toán thất bại: Hết thời gian!';
                    statusElement.className = 'failure';
                    setTimeout(() => paymentModal.querySelector('.btn-close').click(), 2000);
                }
            }, 1000);
        }

        // Kiểm tra trạng thái thanh toán
        async function startPaymentCheck(address, paymentCode, statusElement) {
            checkInterval = setInterval(async () => {
                try {
                    const response = await fetch(`/User/Cart?handler=CheckPayment&paymentCode=${encodeURIComponent(paymentCode)}&address=${encodeURIComponent(address)}`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    const result = await response.json();

                    if (result.success) {
                        clearInterval(timerInterval);
                        clearInterval(checkInterval);
                        statusElement.textContent = result.message || 'Thanh toán thành công!';
                        statusElement.className = 'success';

                        // Gửi email xác nhận (nếu cần)
                        try {
                            const emailResponse = await fetch(`/User/Cart?handler=SendConfirmationEmail&address=${encodeURIComponent(address)}`, {
                                method: 'GET'
                            });
                            const emailResult = await emailResponse.json();
                            if (emailResult.success) {
                                console.log('Email sent successfully:', emailResult.message);
                            } else {
                                console.error('Failed to send email:', emailResult.message);
                            }
                        } catch (emailError) {
                            console.error('Error sending email:', emailError);
                        }

                        setTimeout(() => paymentModal.querySelector('.btn-close').click(), 3000);
                        setTimeout(() => window.location.reload(), 3500); // Tải lại trang sau khi thành công
                    } else if (remainingTime > 0) {
                        console.log('Payment not yet confirmed:', result.message);
                    }
                } catch (error) {
                    clearInterval(timerInterval);
                    clearInterval(checkInterval);
                    statusElement.textContent = 'Lỗi hệ thống, vui lòng thử lại!';
                    statusElement.className = 'failure';
                    setTimeout(() => paymentModal.querySelector('.btn-close').click(), 2000);
                }
            }, 3000); // Kiểm tra mỗi 3 giây
        }
    });
</script> *@
@page
@model PRN222_Final_Project.Pages.User.CartModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@using System.Text.Json
@{
    ViewData["Title"] = "Giỏ Hàng Của Bạn";
    string userIdStr = HttpContextAccessor.HttpContext?.Session.GetString("UserID");
    if (!string.IsNullOrEmpty(userIdStr) && int.TryParse(userIdStr, out int userId))
    {
        userIdStr = userId.ToString("D4");
    }
    else
    {
        userIdStr = "0000";
    }
}

<head>
    <link rel="stylesheet" href="~/css/Cart.css" asp-append-version="true" />
    <style>
        .timer-container {
            text-align: center;
            margin: 10px 0;
        }

        .timer {
            font-size: 1.5rem;
            font-weight: bold;
            color: #ff5722;
        }

        .success {
            color: #28a745;
            font-weight: bold;
        }

        .failure {
            color: #dc3545;
            font-weight: bold;
        }

        .modal-body img {
            margin: 20px auto;
            display: block;
            max-width: 200px;
        }

        .select-item {
            margin-right: 10px;
        }
    </style>
</head>

<div class="container cart-container">
    <h2 class="text-center mb-4">Giỏ Hàng Của Bạn</h2>

    @if (Model.ListCart != null && Model.ListCart.Any())
    {
        <div class="cart-items">
            @foreach (var item in Model.ListCart)
            {
                <div class="cart-item">
                    <input type="checkbox" class="select-item" name="selectedItems" value="@item.ProductId" />
                    <img src="https://images.unsplash.com/photo-1512820790803-83ca734da794" alt="@item.ProductName">
                    <div class="cart-item-info">
                        <h5 class="cart-item-title">@item.ProductName</h5>
                        <p class="cart-item-price">@item.Price.ToString("N0") đ</p>
                    </div>
                    <div class="quantity-control">
                        <form method="post">
                            <input type="hidden" name="productId" value="@item.ProductId" />
                            <button formaction="/User/Cart?handler=UpdateQuantity&change=-1" class="btn btn-sm btn-outline-secondary">-</button>
                            <input type="text" class="quantity" value="@item.Quantity" readonly />
                            <button formaction="/User/Cart?handler=UpdateQuantity&change=1" class="btn btn-sm btn-outline-secondary">+</button>
                        </form>
                    </div>
                    <div class="remove-item ms-3">
                        <form method="post">
                            <input type="hidden" name="productId" value="@item.ProductId" />
                            <button formaction="/User/Cart?handler=RemoveItem" class="btn btn-danger btn-sm">Xóa</button>
                        </form>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-center">Giỏ hàng trống! <a href="/Products">Mua hàng ngay</a>.</p>
    }

    <!-- Pagination -->
    <nav aria-label="Cart Pagination">
        <ul class="pagination justify-content-center">
            @if (Model.TotalPages > 1)
            {
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?pageNumber=@(Model.CurrentPage - 1)">Trước</a>
                </li>

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="?pageNumber=@i">@i</a>
                    </li>
                }

                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" href="?pageNumber=@(Model.CurrentPage + 1)">Tiếp</a>
                </li>
            }
        </ul>
    </nav>
</div>

<!-- Cart Summary and Payment Form -->
<form method="post" asp-page-handler="Payment" id="paymentForm">
    <div class="container cart-summary">
        <h3 class="mb-3">Tổng Quan Đơn Hàng</h3>

        @if (Model.ListCart != null && Model.ListCart.Any())
        {
            <div class="d-flex justify-content-between mb-2">
                <span>Tạm tính (<span id="selectedCount">0</span> sản phẩm):</span>
                <span class="fw-bold" id="subtotal">0 đ</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span>Phí vận chuyển:</span>
                <span class="fw-bold">Free</span>
            </div>
            <div class="d-flex justify-content-between mb-3">
                <span>Tổng cộng:</span>
                <span class="fw-bold text-success fs-4" id="totalAmount">0 đ</span>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-between mb-2">
                <span>Tạm tính (0 sản phẩm):</span>
                <span class="fw-bold">0 đ</span>
            </div>
            <div class="d-flex justify-content-between mb-2">
                <span>Phí vận chuyển:</span>
                <span class="fw-bold">0 đ</span>
            </div>
            <div class="d-flex justify-content-between mb-3">
                <span>Tổng cộng:</span>
                <span class="fw-bold text-success fs-4">0 đ</span>
            </div>
        }

        <div class="mb-3">
            <label for="address" class="form-label fw-bold">Địa chỉ - Số điện thoại giao hàng:</label>
            <input type="text" class="address-input form-control" id="address" name="address" placeholder="Nhập địa chỉ và số điện thoại giao hàng..." required>
            <small id="addressError" class="text-danger" style="display: none;">Vui lòng nhập cả địa chỉ và số điện thoại!</small>
        </div>

        <button type="button" class="btn-checkout" id="showPaymentModal">Thanh Toán</button>
    </div>

    <!-- Payment Modal -->
    <div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="paymentModalLabel">Thanh Toán Đơn Hàng</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img src="" alt="QR Code Thanh Toán" id="qr-code">
                    <p><strong>Số tiền:</strong> <span id="modal-price"></span></p>
                    <p><strong>Địa chỉ giao hàng:</strong> <span id="modal-address"></span></p>
                    <p><strong>Nội dung chuyển khoản:</strong> <span id="payment-code"></span></p>
                    <p><strong>Ngân hàng:</strong> TPBank</p>
                    <p><strong>Số tài khoản:</strong> 00003480126</p>
                    <p><strong>Chủ tài khoản:</strong> Trần Đình Đức</p>
                    <div class="timer-container">
                        <p>Thời gian còn lại: <span id="timer" class="timer">03:00</span></p>
                        <p id="payment-status"></p>
                    </div>
                    <p>Vui lòng quét mã QR hoặc chuyển khoản theo thông tin trên để hoàn tất thanh toán.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
</form>

<!-- Bootstrap JS and Custom Script -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const paymentModal = document.getElementById('paymentModal');
        const qrBaseUrl = 'https://qr.sepay.vn/img?acc=00003480126&bank=TPBank&amount=';
        const userIdStr = '@userIdStr';
        let currentPaymentCode = '';
        let timerInterval = null;
        let checkInterval = null;
        const totalTime = 3 * 60 * 1000; // 3 phút
        let remainingTime = totalTime;

        // Tính toán tổng tiền và số sản phẩm được chọn
        function updateSummary() {
            const selectedItems = document.querySelectorAll('.select-item:checked');
            let total = 0;
            selectedItems.forEach(item => {
                const cartItem = item.closest('.cart-item');
                const price = parseInt(cartItem.querySelector('.cart-item-price').textContent.replace(/[^0-9]/g, ''));
                const quantity = parseInt(cartItem.querySelector('.quantity').value);
                total += price * quantity;
            });
            document.getElementById('selectedCount').textContent = selectedItems.length;
            document.getElementById('subtotal').textContent = total.toLocaleString('vi-VN') + ' đ';
            document.getElementById('totalAmount').textContent = total.toLocaleString('vi-VN') + ' đ';
        }

        // Gắn sự kiện cho checkbox
        document.querySelectorAll('.select-item').forEach(checkbox => {
            checkbox.addEventListener('change', updateSummary);
        });

        // Xử lý nút Thanh Toán
        document.getElementById('showPaymentModal').addEventListener('click', function (e) {
            e.preventDefault();

            const selectedItems = document.querySelectorAll('.select-item:checked');
            if (selectedItems.length === 0) {
                alert('Vui lòng chọn ít nhất một sản phẩm để thanh toán!');
                return;
            }

            const addressInput = document.getElementById('address');
            const addressError = document.getElementById('addressError');

            if (!addressInput.value.trim()) {
                addressError.style.display = 'block';
                return;
            }
            addressError.style.display = 'none';

            const modal = new bootstrap.Modal(paymentModal);
            modal.show();
        });

        // Khi modal hiển thị
        paymentModal.addEventListener('show.bs.modal', function (event) {
            const address = document.getElementById('address').value;
            const price = document.getElementById('totalAmount').textContent.trim();

            const now = new Date();
            const timestamp = now.getUTCFullYear().toString().slice(-2) +
                String(now.getUTCMonth() + 1).padStart(2, '0') +
                String(now.getUTCDate()).padStart(2, '0') +
                String(now.getUTCHours()).padStart(2, '0') +
                String(now.getUTCMinutes()).padStart(2, '0');
            currentPaymentCode = `${userIdStr}${timestamp}`;

            const modalPrice = document.getElementById('modal-price');
            const modalAddress = document.getElementById('modal-address');
            const paymentCodeSpan = document.getElementById('payment-code');
            const qrImage = document.getElementById('qr-code');
            const timerDisplay = document.getElementById('timer');
            const paymentStatus = document.getElementById('payment-status');

            modalPrice.textContent = price;
            modalAddress.textContent = address;
            paymentCodeSpan.textContent = currentPaymentCode;
            paymentStatus.textContent = '';

            const cleanPrice = price.replace(/[^0-9]/g, '');
            qrImage.src = `${qrBaseUrl}${cleanPrice}&des=${currentPaymentCode}`;

            remainingTime = totalTime;
            updateTimerDisplay(timerDisplay);
            startTimer(timerDisplay, paymentStatus);
            startPaymentCheck(address, currentPaymentCode, paymentStatus);
        });

        // Khi modal bị đóng
        paymentModal.addEventListener('hidden.bs.modal', function () {
            clearInterval(timerInterval);
            clearInterval(checkInterval);
        });

        // Cập nhật đồng hồ đếm ngược
        function updateTimerDisplay(timerElement) {
            const minutes = Math.floor(remainingTime / 60000);
            const seconds = Math.floor((remainingTime % 60000) / 1000);
            timerElement.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }

        // Khởi động đồng hồ đếm ngược
        function startTimer(timerElement, statusElement) {
            timerInterval = setInterval(() => {
                remainingTime -= 1000;
                updateTimerDisplay(timerElement);

                if (remainingTime <= 0) {
                    clearInterval(timerInterval);
                    clearInterval(checkInterval);
                    statusElement.textContent = 'Thanh toán thất bại: Hết thời gian!';
                    statusElement.className = 'failure';
                    setTimeout(() => paymentModal.querySelector('.btn-close').click(), 2000);
                }
            }, 1000);
        }

        // Kiểm tra trạng thái thanh toán
        // async function startPaymentCheck(address, paymentCode, statusElement) {
        //     checkInterval = setInterval(async () => {
        //         try {
        //             const selectedItems = Array.from(document.querySelectorAll('.select-item:checked')).map(item => item.value);
        //             const response = await fetch(`/User/Cart?handler=CheckPayment&paymentCode=${encodeURIComponent(paymentCode)}&address=${encodeURIComponent(address)}&selectedItems=${selectedItems.join(',')}`, {
        //                 method: 'GET',
        //                 headers: { 'Content-Type': 'application/json' }
        //             });

        //             const result = await response.json();

        //             if (result.success) {
        //                 clearInterval(timerInterval);
        //                 clearInterval(checkInterval);
        //                 statusElement.textContent = result.message || 'Thanh toán thành công!';
        //                 statusElement.className = 'success';

        //                 // try {
        //                 //     const emailResponse = await fetch(`/User/Cart?handler=SendConfirmationEmail&address=${encodeURIComponent(address)}&selectedItems=${selectedItems.join(',')}`, {
        //                 //         method: 'GET'
        //                 //     });
        //                 //     const emailResult = await emailResponse.json();
        //                 //     if (emailResult.success) {
        //                 //         console.log('Email sent successfully:', emailResult.message);
        //                 //     } else {
        //                 //         console.error('Failed to send email:', emailResult.message);
        //                 //     }
        //                 // } catch (emailError) {
        //                 //     console.error('Error sending email:', emailError);
        //                 // }

        //                 setTimeout(() => paymentModal.querySelector('.btn-close').click(), 3000);
        //                 setTimeout(() => window.location.reload(), 3500);
        //             } else if (remainingTime > 0) {
        //                 console.log('Payment not yet confirmed:', result.message);
        //             }
        //         } catch (error) {
        //             clearInterval(timerInterval);
        //             clearInterval(checkInterval);
        //             statusElement.textContent = 'Lỗi hệ thống, vui lòng thử lại!';
        //             statusElement.className = 'failure';
        //             setTimeout(() => paymentModal.querySelector('.btn-close').click(), 2000);
        //         }
        //     }, 3000);
        // }

        async function startPaymentCheck(address, paymentCode, statusElement) {
            try {
                const selectedItems = Array.from(document.querySelectorAll('.select-item:checked')).map(item => item.value);
                const response = await fetch(`/User/Cart?handler=CheckPayment&paymentCode=${encodeURIComponent(paymentCode)}&address=${encodeURIComponent(address)}&selectedItems=${selectedItems.join(',')}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.success) {
                    statusElement.textContent = result.message || 'Thanh toán thành công!';
                    statusElement.className = 'success';

                    // try {
                    //     const emailResponse = await fetch(`/User/Cart?handler=SendConfirmationEmail&address=${encodeURIComponent(address)}&selectedItems=${selectedItems.join(',')}`, {
                    //         method: 'GET'
                    //     });
                    //     const emailResult = await emailResponse.json();
                    //     if (emailResult.success) {
                    //         console.log('Email sent successfully:', emailResult.message);
                    //     } else {
                    //         console.error('Failed to send email:', emailResult.message);
                    //     }
                    // } catch (emailError) {
                    //     console.error('Error sending email:', emailError);
                    // }

                    setTimeout(() => paymentModal.querySelector('.btn-close').click(), 3000);
                    setTimeout(() => window.location.reload(), 3500);
                } else {
                    console.log('Payment not yet confirmed:', result.message);
                }
            } catch (error) {
                statusElement.textContent = 'Lỗi hệ thống, vui lòng thử lại!';
                statusElement.className = 'failure';
                setTimeout(() => paymentModal.querySelector('.btn-close').click(), 2000);
            }
        }
    });
</script>